"use strict";function isNum(t){return"number"==typeof t}function isNumeric(t){return!isNaN(t-parseFloat(t))}Object.defineProperty(exports,"__esModule",{value:!0});class Comparer{static get stringAscending(){return(t,e)=>t.localeCompare(e)}static get stringDescending(){return(t,e)=>e.localeCompare(t)}static get numberAscending(){return(t,e)=>t-e}static get numberDescending(){return(t,e)=>e-t}}Array.prototype.rank=function(t){const e=this.slice().sort(t);return this.slice().map(t=>e.indexOf(t))},Array.prototype.reorderBy=function(t){const e=new Array(this.length);return t.forEach((t,r)=>{e[t]=this[r]}),e},Array.prototype.max=function(){return this.reduce((t,e)=>isNaN(e)?t:Math.max(t,e),Number.NEGATIVE_INFINITY)},Array.prototype.min=function(){return this.reduce((t,e)=>isNaN(e)?t:Math.min(t,e),Number.POSITIVE_INFINITY)};class Stat{static cnt(t){return t.length}static sum(t){switch(t.length){case 0:return NaN;case 1:return t[0];default:let e=0;for(let r=0;r<t.length;r++)e+=t[r];return e}}static avg(t){return Stat.sum(t)/t.length}static mode(t){}static median(t){}static bound(t){switch(t.length){case 0:return{max:NaN,min:NaN};case 1:return{max:t[0],min:t[0]};default:let[e,r]=[t[0],t[0]];for(let a=1;a<t.length;a++)t[a]>e&&(e=t[a]),t[a]<r&&(r=t[a]);return{max:e,min:r}}}static stDevP(t){const e=Stat.avg(t),r=Stat.cnt(t);return Math.hypot(...t.map(t=>t-e))/Math.sqrt(r)}static stDevS(t){const e=Stat.avg(t),r=Stat.cnt(t)-1;return Math.hypot(...t.map(t=>t-e))/Math.sqrt(r)}}class StatA{static cnt(...t){return t.length}static sum(...t){return t.reduce((t,e)=>t+e,0)}static avg(...t){return Stat.sum(t)/Stat.cnt(t)}static mode(...t){}static median(...t){}static bound(...t){switch(t.length){case 0:return{max:NaN,min:NaN};case 1:return{max:t[0],min:t[0]};default:let[e,r]=[t[0],t[0]];for(let a=1;a<t.length;a++)t[a]>e&&(e=t[a]),t[a]<r&&(r=t[a]);return{max:e,min:r}}}static stDevP(t){const e=Stat.avg(t),r=Stat.cnt(t);return Math.hypot(...t.map(t=>t-e))/Math.sqrt(r)}static stDevS(t){const e=Stat.avg(t),r=Stat.cnt(t)-1;return Math.hypot(...t.map(t=>t-e))/Math.sqrt(r)}}class StatB{static sum(t,e){switch(t.length){case 0:return NaN;case 1:return e(t[0]);default:let r=0;for(let a=0;a<t.length;a++)r+=e(t[a]);return r}}static max(t,e){switch(t.length){case 0:return NaN;case 1:return e(t[0]);default:let r,a=e(t[0]);for(let n=1;n<t.length;n++)(r=e(t[n]))>a&&(a=r);return a}}}class Zu{static randBetween(t,e){return~~(Math.random()*(e-t+1))+t}static rand(t,e){return~~(Math.random()*(e-t))+t}static almostEquals(t,e,r){return Math.abs(t-e)<r}static almostInt(t,e){return Math.abs(t-Math.round(t))<e}static intExponent(t){return Math.floor(Math.log10(t))}}exports.isNum=isNum,exports.isNumeric=isNumeric,exports.Comparer=Comparer,exports.Stat=Stat,exports.StatA=StatA,exports.StatB=StatB,exports.Zu=Zu;
